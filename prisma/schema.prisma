generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  fullName  String
  phone     String?
  avatar    String?
  role      Role     @default(USER)
  bookings  Booking[]
  reviews   Review[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cinema {
  id          Int      @id @default(autoincrement())
  name        String
  address     String
  city        String
  phone       String
  screens     Screen[]
  createdAt   DateTime @default(now())
}

model Screen {
  id        Int       @id @default(autoincrement())
  name      String
  cinema    Cinema    @relation(fields: [cinemaId], references: [id])
  cinemaId  Int
  capacity  Int
  rows      Int       @default(10)
  seatsPerRow Int     @default(12)
  showtimes Showtime[]
  seats     Seat[]
}

model Seat {
  id       Int    @id @default(autoincrement())
  screen   Screen @relation(fields: [screenId], references: [id])
  screenId Int
  row      String // A, B, C...
  number   Int    // 1, 2, 3...
  type     SeatType @default(REGULAR)
  isActive Boolean @default(true)
  bookingSeats BookingSeat[] // ✅ Relationship với booking
  
  @@unique([screenId, row, number])
}

model BookingSeat {
  id        Int     @id @default(autoincrement())
  booking   Booking @relation(fields: [bookingId], references: [id])
  bookingId Int
  seat      Seat    @relation(fields: [seatId], references: [id])
  seatId    Int
  price     Float   // Giá của ghế này (có thể khác nhau theo loại ghế)
  
  @@unique([bookingId, seatId])
}

model Movie {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  duration    Int        // phút
  genre       String
  director    String
  cast        String
  rating      Float?
  poster      String
  trailer     String?
  releaseDate DateTime
  status      MovieStatus @default(COMING_SOON)
  showtimes   Showtime[]
  reviews     Review[]
  createdAt   DateTime   @default(now())
}

model Showtime {
  id       Int       @id @default(autoincrement())
  movie    Movie     @relation(fields: [movieId], references: [id])
  movieId  Int
  screen   Screen    @relation(fields: [screenId], references: [id])
  screenId Int
  startTime DateTime
  endTime   DateTime
  price     Float
  bookings  Booking[]
}

model Booking {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  showtime   Showtime @relation(fields: [showtimeId], references: [id])
  showtimeId Int
  seats      String
  bookingSeats BookingSeat[]
  totalPrice Float
  status     BookingStatus @default(PENDING)
  bookingCode String   @unique
  paymentMethod String?
  paymentStatus PaymentStatus @default(PENDING)
  createdAt  DateTime @default(now())
  expiresAt  DateTime?
}

model Review {
  id      Int    @id @default(autoincrement())
  user    User   @relation(fields: [userId], references: [id])
  userId  Int
  movie   Movie  @relation(fields: [movieId], references: [id])
  movieId Int
  rating  Int    // 1-5
  comment String?
  createdAt DateTime @default(now())

  @@unique([userId, movieId])
}

model News {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  image     String?
  author    String
  published Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Promotion {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  discount    Float    // phần trăm giảm giá
  code        String   @unique
  startDate   DateTime
  endDate     DateTime
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
}

enum SeatType {
  REGULAR
  VIP
  COUPLE
  DISABLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum Role {
  USER
  ADMIN
}

enum MovieStatus {
  COMING_SOON
  NOW_SHOWING
  ENDED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  EXPIRED
}